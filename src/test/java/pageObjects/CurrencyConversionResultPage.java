package pageObjects;import dataProviders.ConfigFileReader;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.openqa.selenium.WebDriver;import org.openqa.selenium.WebElement;import org.openqa.selenium.support.FindBy;import org.openqa.selenium.support.PageFactory;import utilities.WaitHandlers;import java.util.concurrent.TimeUnit;public class CurrencyConversionResultPage {    WebDriver driver;    ConfigFileReader configFile;    public CurrencyConversionResultPage(WebDriver webDriver) {        PageFactory.initElements(webDriver, this);        this.driver=webDriver;        this.configFile= new ConfigFileReader();        //        PageFactory.initElements(new AjaxElementLocatorFactory(webDriver, 15), this);        webDriver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);    }    @FindBy(xpath = "//input[@id='amount']")    private WebElement amountToConvert;    @FindBy(xpath = "//div[@id='midmarketFromCurrency-descriptiveText']")    private WebElement fromCurrency;    @FindBy(xpath = "//div[@id='midmarketToCurrency-descriptiveText']")    private WebElement toCurrency;    @FindBy(xpath = "//div[@class='unit-rates___StyledDiv-sc-1dk593y-0 dEqdnx']/p[1]")    private WebElement conversionRate;    @FindBy(xpath = "//p[@class='result__BigRate-sc-1bsijpp-1 iGrAod']")    private WebElement convertedAmount;    public double getAmount(){        WaitHandlers.untilElementIsVisible(driver,amountToConvert,10L);        WaitHandlers.waitMilliseconds(3000);        String amount=amountToConvert.getAttribute("value");        //        System.out.println(amount);        //        if (amount!=null &&!amount.isEmpty() && amount.contains(".")) {        //            String[] parts = amount.split("\\.");        //            for (String s:parts) {        //                System.out.println();        //            }        //            System.out.println(parts[0]);        //            System.out.println(parts[1]);        //            String amountBeforeDecimal = parts[0]; // 004        //            return removeCommasFromNumber(amountBeforeDecimal);        //        }        System.out.println("Amount To Convert:"+amount);        return convertStringToDecimal(removeCommasFromNumber(amount));    }    public String getFromCurrency(){        WaitHandlers.waitMilliseconds(2000);        String sourceCurrency=getCurrencyCode(fromCurrency.getText());        System.out.println("From currency:"+sourceCurrency);        return sourceCurrency;    }    public String getToCurrency(){        WaitHandlers.waitMilliseconds(2000);        String targetCurrency=getCurrencyCode(toCurrency.getText());        System.out.println("To currency:"+targetCurrency);        return targetCurrency;    }    public boolean validateConversion(double amountToConvert){        WaitHandlers.waitMilliseconds(2000);        //System.out.println(conversionRate.getText());        String conversionRateFromResultPage=conversionRate.getText();        String[] extractConversionRateInArray = conversionRateFromResultPage.split("=");        String extractedConversionRateAfterEqual=extractConversionRateInArray[1];        String[] extractConversionRateAfterEqual=extractedConversionRateAfterEqual.trim().split(" ");        //System.out.println("con:" + extractConversionRateAfterEqual[0]);        String extractedConversionRate=extractConversionRateAfterEqual[0];        double finalConversionRate=convertStringToDecimal(removeCommasFromNumber(extractedConversionRate));        // System.out.println(convertedAmount.getText());        String convertedAmountFromResultPage=convertedAmount.getText();        String[] extractConvertedAmountArray=convertedAmountFromResultPage.split(" ");        String extractedConvertedAmount=extractConvertedAmountArray[0];      //  System.out.println("extractedConvertedAmount:"+extractedConvertedAmount);        Double finalConvertedAmount=convertStringToDecimal(removeCommasFromNumber(extractedConvertedAmount));        double extractedConvertedAmountWithRounding =Math.round(finalConvertedAmount);        double  finalCalculatedAmountBasedOnConversionRateWithRounding = Math.round(amountToConvert*finalConversionRate);        System.out.println("Amount to convert:"+extractedConvertedAmountWithRounding);        System.out.println("Conversion rate:"+finalConversionRate);        System.out.println("Converted Amount:"+finalCalculatedAmountBasedOnConversionRateWithRounding);        if(extractedConvertedAmountWithRounding==finalCalculatedAmountBasedOnConversionRateWithRounding){            return true;        }else{            return false;        }    }    public Double convertStringToDecimal(String tempNumber){        if (tempNumber!=null&&!tempNumber.isEmpty()) {            Double number= Double.parseDouble(tempNumber);            return number;        }else{            return null;        }    }    public int convertStringToInt(String temp){        int number=0;        if (temp!=null&&!temp.isEmpty()) {            number= Integer.parseInt(temp);            return number;        }        return number;    }    public String removeCommasFromNumber(String tempNumber){        if (tempNumber!=null&&!tempNumber.isEmpty()&&tempNumber.contains(",")) {            String number=tempNumber.replace(",","");            return number;        }        return tempNumber;    }    public String getCurrencyCode(String currency){        //  System.out.println(currency);        if (currency!=null &&!currency.isEmpty()) { //&&currency.contains("-")            String cur=currency.replace(" ","");            String[] currencyName = cur.split("â€“");            String currencyCode = currencyName[0].trim();            return currencyCode;        }        return currency;    }}