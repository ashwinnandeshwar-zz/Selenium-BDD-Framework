package stepDefinations;import contexts.TestContext;import io.cucumber.java.en.Then;import io.cucumber.java.en.When;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.junit.Assert;import pageObjects.CurrencyConversionPage;import pageObjects.CurrencyConversionResultPage;public class CurrencyConversionStepDef {    Logger log= LogManager.getLogger(CurrencyConversionStepDef.class);    TestContext testContext;    CurrencyConversionPage currencyConversionPage;    CurrencyConversionResultPage currencyConversionResultPage;    public CurrencyConversionStepDef(TestContext testContext) {        this.testContext = testContext;        currencyConversionPage=testContext.getPageObjectManager().getCurrencyConversionPage();        currencyConversionResultPage=testContext.getPageObjectManager().getCurrencyConversionResultPage();    }    @When("^user enters amount (.+)$")    public void userEnterAmount(String amount) {        currencyConversionPage.setAmountToConvert(amount);        log.info("Amount to convert"+amount);    }    @When("^wants to convert from (.+) to (.+)$")    public void convertFromSourceToTargetCurrency(String fromcurrency,String tocurrency) {        currencyConversionPage.setFromCurrency(fromcurrency);        currencyConversionPage.setToCurrency(tocurrency);        currencyConversionPage.convert();        log.info("amount will be converted from "+fromcurrency +"to "+tocurrency);    }    @Then("^amount (.+) remains same after conversion$")    public void validateEnteredAmount(String amount) {         currencyConversionResultPage.getAmount();       // Assert.assertEquals(d,currencyConversionResultPage.getAmount());    }    @Then("^currency from (.+) to (.+) remains same after conversion$")    public void validateSelectedCurrencies(String fromcurrency, String tocurrency) {        Assert.assertEquals(fromcurrency,currencyConversionResultPage.getFromCurrency());        Assert.assertEquals(tocurrency,currencyConversionResultPage.getToCurrency());    }    @Then("converted amount should be correct")    public void validateConversionRate() {        Assert.assertTrue(currencyConversionResultPage.validateConversion(currencyConversionResultPage.getAmount()));    }}